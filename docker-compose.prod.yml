version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: opalsight_db_prod
    environment:
      POSTGRES_DB: opalsight
      POSTGRES_USER: ${DB_USER:-opalsight}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    ports:
      - "5432:5432"
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U opalsight"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - opalsight_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: opalsight_redis_prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - opalsight_network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - ENVIRONMENT=production
    container_name: opalsight_backend_prod
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://${DB_USER:-opalsight}:${DB_PASSWORD}@db:5432/opalsight
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - FMP_API_KEY=${FMP_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - SECRET_KEY=${SECRET_KEY}
      - SMTP_HOST=${SMTP_HOST:-}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USERNAME=${SMTP_USERNAME:-}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-}
      - FRONTEND_URL=${FRONTEND_URL:-https://opalsight.com}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "5000:5000"
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - opalsight_network
    volumes:
      - ./backend/logs:/app/logs
    command: gunicorn -w 4 -b 0.0.0.0:5000 --timeout 120 --access-logfile - --error-logfile - run:app

  # Scheduler Service
  scheduler:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: opalsight_scheduler_prod
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://${DB_USER:-opalsight}:${DB_PASSWORD}@db:5432/opalsight
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - FMP_API_KEY=${FMP_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
    depends_on:
      - backend
    restart: always
    networks:
      - opalsight_network
    volumes:
      - ./backend/logs:/app/logs
    command: python scheduler.py

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=${API_URL:-http://localhost:5000}
    container_name: opalsight_frontend_prod
    ports:
      - "80:80"
      - "443:443"
    restart: always
    depends_on:
      - backend
    networks:
      - opalsight_network
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./frontend/build:/usr/share/nginx/html

  # Nginx Reverse Proxy (optional, if not using frontend nginx)
  nginx:
    image: nginx:alpine
    container_name: opalsight_nginx_prod
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx/prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    restart: always
    networks:
      - opalsight_network

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: opalsight_prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: always
    networks:
      - opalsight_network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: opalsight_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
    ports:
      - "3001:3000"
    restart: always
    depends_on:
      - prometheus
    networks:
      - opalsight_network

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: opalsight_backup
    environment:
      - PGPASSWORD=${DB_PASSWORD}
    volumes:
      - ./backups:/backups
    command: |
      sh -c 'while true; do
        pg_dump -h db -U ${DB_USER:-opalsight} -d opalsight > /backups/opalsight_$$(date +%Y%m%d_%H%M%S).sql
        find /backups -name "*.sql" -mtime +7 -delete
        sleep 86400
      done'
    depends_on:
      db:
        condition: service_healthy
    restart: always
    networks:
      - opalsight_network

networks:
  opalsight_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data: 